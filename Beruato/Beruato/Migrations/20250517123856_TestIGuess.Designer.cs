// <auto-generated />
using System;
using Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Beruato.Migrations
{
    [DbContext(typeof(BerautoDbContext))]
    [Migration("20250517123856_TestIGuess")]
    partial class TestIGuess
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualKilometers")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FuelType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("HasValidVignette")
                        .HasColumnType("bit");

                    b.Property<bool>("InProperCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutomatic")
                        .HasColumnType("bit");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerKilometer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RequiredLicence")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicencePlate")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Database.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IssuedBy")
                        .HasColumnType("int");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("RentId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Database.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EndingKilometer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("InvoiceRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IssuedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlannedEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StartingKilometer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TakenBackBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CarId");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("RenterId");

                    b.HasIndex("TakenBackBy");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenceId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("RegisteredUser")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Models.Receipt", b =>
                {
                    b.HasOne("Database.Models.User", "IssuerOperator")
                        .WithMany()
                        .HasForeignKey("IssuedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Rent", "Rent")
                        .WithOne()
                        .HasForeignKey("Database.Models.Receipt", "RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuerOperator");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Database.Models.Rent", b =>
                {
                    b.HasOne("Database.Models.User", "ApproverOperator")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.User", "IssuerOperator")
                        .WithMany()
                        .HasForeignKey("IssuedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.User", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.User", "RecipientOperator")
                        .WithMany()
                        .HasForeignKey("TakenBackBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApproverOperator");

                    b.Navigation("Car");

                    b.Navigation("IssuerOperator");

                    b.Navigation("RecipientOperator");

                    b.Navigation("Renter");
                });
#pragma warning restore 612, 618
        }
    }
}
